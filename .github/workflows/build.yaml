name: Deploy

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # You can add more, for any target you'd like!
        # os: [ubuntu-latest, macos-latest, windows-latest] # 定义操作系统矩阵
        # arch: [x86_64, aarch64] # 定义架构矩阵
        include:
          - build: linux-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc

          - build: windows-gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu
          


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # - name: Install Rust
      #   # Or @nightly if you want
      #   uses: dtolnay/rust-toolchain@stable
      #   # Arguments to pass in
      #   with:
      #     # Make Rust compile to our target (defined in the matrix)
      #     targets: ${{ matrix.target }}

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev openssl

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl


      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      # - name: Set environment variables
      #   run: |
      #     echo "OPENSSL_DIR=/usr/local/opt/openssl" >> $GITHUB_ENV
      #     echo "PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig" >> $GITHUB_ENV
      #     echo "OPENSSL_LIB_DIR=/usr/local/opt/openssl/lib" >> $GITHUB_ENV
      #     echo "OPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include" >> $GITHUB_ENV

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: false
          command: build
          args: --verbose --release --target ${{ matrix.target }} --bin zhao

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="zhao"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          # if [ "${{ matrix.os }}" = "windows-latest" ]; then
          #   7z a "$dirname.zip" "$dirname"
          #   echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          # else
          #   tar -czf "$dirname.tar.gz" "$dirname"
          #   echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          # fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}